name: Build Linux Packages (pnpm)

on:
  workflow_dispatch:  # 允许手动触发
  push:
    tags:
      - 'v*'  # 当推送v开头的标签时触发

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    timeout-minutes: 30  # 设置超时时间

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 拉取完整历史，确保版本号正确

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'  # 启用pnpm缓存

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          CI: true  # 标记为CI环境，可能影响某些依赖安装

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          # 验证安装
          aarch64-linux-gnu-gcc --version

      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: Build Linux packages (x64 + arm64)
        run: pnpm exec electron-builder --linux
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: false
          ELECTRON_BUILDER_FORCE_UNSAFE_ASAR_EXTRACTION: false

      - name: Debug - List release directory
        run: |
          echo "Contents of release directory:"
          ls -la release/
          echo "Full file paths:"
          find release/ -type f

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            release/*.deb
            release/*.AppImage
          if-no-files-found: error
          retention-days: 14  #  artifacts保留14天

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## Release ${{ github.ref_name }}
            Linux builds for x64 and arm64 architectures.
          files: |
            release/*.deb
            release/*.AppImage
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
